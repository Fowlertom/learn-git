

GIT Commands
************

get local copy (first time)	- in TFS online, click 'clone', click 'clone in Visual Studio'
					or from the command line
				- git clone 'url'

http://azuredevops.ae.alberta.ca/SFS/SFS%202.0/_git/WelcomePage


branch actions
--------------

rename branch:

- git branch -m old-name new-name
// Delete the old branch on TFS via browser (if the old branch was pushed)
- git remote prune origin (if the old branch was pushed)
- git push origin -u new-name


other actions
-------------
undo a change					 		- git checkout -q -- FILENAME_INCLUDING_PATH	(or click on the 'undo' icon in the 'fork looking icon')
view history 					 		- git log --oneline
get lastest of master to your branch	- git rebase master
				- Re-base your local branch and replay the changes on the tip of master. This command rewrites history.
				- After a re-base, history is rewritten so that "its as if the branch was created from the tip of master" - even though that it was actually created from a previous point in time.
				- Since you've rewritten history, you need to force push your branch to the server.

git push origin BRANCHNAME --force (put your branch on the server after a rebase)


Big References
**************

git diff
git status

*****************************************
*****************************************
References:
*****************************************
*****************************************
https://cloud.eae.alberta.ca/sites/sfs/Wiki/Git%20instructions.aspx
https://cloud.eae.alberta.ca/sites/sfs/Wiki/Common%20Git%20Commands.aspx
online markdown editor - https://dillinger.io/

*****************************************
*****************************************
Common Git Commands
*****************************************
*****************************************

branching and merging

merge XXX (newer) to YYY (older)

git checkout YYY
git rebase XXX
create a TFS pull request from XXX to YYY















1. git status
- Find out which branch you're on
- View the list of pending changes: untracked files (red), staged files for commit (green)
- Determine if you are up-to-date with the remote branch

4. git checkout *
-  Undo all changes for tracked filesre

7. git fetch --prune --all
- Get latest for all remote branches from the server.  Prune any branches that have been deleted from the server (i.e. a branch could be deleted from the server via a PR)

9. git push -u origin <branch-name> --force

- Force push the branch to the server (completely overwrite the branch on the server if it already exists)
- Use this when you want to force push your local dev branch to the server after an operation which has re-written history
  i.e. git rebase

This is part of the check-in dance: 

a. git fetch --all  (get latest for all remote branches)
b. git checkout <branch-name> (select the active branch)
c. git rebase master (rebase on top of local master)  
d. (if there are any merge conflicts, then fix, add * and commit) 
e. git push -u origin <branch-name> --force (force push branch to server)

16. git push origin :<branch-name>

- after deleting a local branch, push that delete to the server (notice the ":" prefix)

17. git log --all --oneline --graph --decorate=short

- show a log of all the commits from all branches in an ASCII graphical representation

18. git reflog

- show a log of all git operations (regardless of whether they are destructive operations)
- use this command to show a complete commit history (even those that would not appear in the git log) - This is a complete commit audit trail - useful if you need to roll back a commit in an emergency, and that commit does not appear in the normal git log.


# Run this script as admin account (.Z account)
Add-LocalGroupMember -Group "Administrators" -Member "GOA\hubert.k.lin" # <- Replace your GOA username
logoff